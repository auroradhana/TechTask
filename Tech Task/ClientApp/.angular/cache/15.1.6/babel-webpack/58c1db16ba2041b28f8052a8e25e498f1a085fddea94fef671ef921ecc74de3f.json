{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { DatePipe } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class OrdersComponent {}\nOrdersComponent.ɵfac = function OrdersComponent_Factory(t) {\n  return new (t || OrdersComponent)();\n};\nOrdersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OrdersComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 1,\n  vars: 0,\n  template: function OrdersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  dependencies: [i1.RouterOutlet],\n  encapsulation: 2\n});\nlet OrderListComponent = class OrderListComponent {\n  constructor(router, service, toastr) {\n    this.router = router;\n    this.service = service;\n    this.toastr = toastr;\n  }\n  ngOnInit() {\n    this.getOrders();\n  }\n  getOrders() {\n    this.service.getOrders().subscribe(orders => {\n      this.orders = orders;\n    });\n  }\n};\nOrderListComponent = __decorate([Component({\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./orders.component.css']\n})], OrderListComponent);\nexport { OrderListComponent };\nlet NewOrderComponent = class NewOrderComponent {\n  constructor(router, oService, pService, toastr, formBuilder) {\n    this.router = router;\n    this.oService = oService;\n    this.pService = pService;\n    this.toastr = toastr;\n    this.formBuilder = formBuilder;\n    this.currentDate = new Date();\n    this.products = [{\n      id: 1,\n      name: \"First\",\n      category: \"Test\",\n      size: 5,\n      quantity: 2,\n      price: 50\n    }, {\n      id: 2,\n      name: \"Second\",\n      category: \"Test\",\n      size: 15,\n      quantity: 1,\n      price: 100\n    }];\n    this.currFormater = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    });\n    this.CreateForm();\n    this.total = this.currFormater.format(this.getTotal());\n  }\n  CreateForm() {\n    this.orderForm = this.formBuilder.group({\n      'orderNumber': [''],\n      'orderDate': [this.currentDate.toLocaleDateString()],\n      'customer': ['', [Validators.required]],\n      'status': ['', [Validators.required]],\n      'totalCost': [''],\n      'products': [this.products],\n      'comment': ['']\n    });\n  }\n  addProduct() {\n    this.products.push({\n      id: 1,\n      name: \"First\",\n      category: \"Test\",\n      size: 5,\n      quantity: 2,\n      price: 50\n    });\n    this.total = this.currFormater.format(this.getTotal());\n  }\n  saveOrder() {\n    if (this.orderForm.dirty && this.orderForm.valid) {\n      console.log(this.orderForm.value);\n    }\n  }\n  getTotal() {\n    let total = 0;\n    for (const element of this.products) {\n      total += element.quantity * element.price;\n    }\n    return total;\n  }\n};\nNewOrderComponent = __decorate([Component({\n  templateUrl: './new-order.component.html',\n  styleUrls: ['./orders.component.css'],\n  providers: [DatePipe]\n})], NewOrderComponent);\nexport { NewOrderComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","DatePipe","OrdersComponent","selectors","decls","vars","template","i0","OrderListComponent","constructor","router","service","toastr","ngOnInit","getOrders","subscribe","orders","templateUrl","styleUrls","NewOrderComponent","oService","pService","formBuilder","Date","id","name","category","size","quantity","price","Intl","NumberFormat","style","currency","CreateForm","total","currFormater","format","getTotal","orderForm","group","currentDate","toLocaleDateString","required","products","addProduct","push","saveOrder","dirty","valid","console","log","value","element","providers"],"sourceRoot":"","sources":["D:\\Documents\\.NETProjects\\Tech Task\\Tech Task\\ClientApp\\src\\app\\orders\\orders.component.ts"],"sourcesContent":["import { Router } from '@angular/router';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\nimport { OrderService } from 'src/app/_services/order.service';\r\nimport { ProductService } from 'src/app/_services/product.service';\r\n\r\n@Component({\r\n  template: `<router-outlet></router-outlet>`,\r\n})\r\nexport class OrdersComponent {\r\n}\r\n\r\n@Component({\r\n  templateUrl: './order-list.component.html',\r\n  styleUrls: ['./orders.component.css']\r\n})\r\nexport class OrderListComponent {\r\n  orders: any;\r\n\r\n  constructor(private router: Router,\r\n    private service: OrderService,\r\n    private toastr: ToastrService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.getOrders();\r\n  }\r\n\r\n  private getOrders() {\r\n    this.service.getOrders().subscribe(orders => {\r\n      this.orders = orders;\r\n    });\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  templateUrl: './new-order.component.html',\r\n  styleUrls: ['./orders.component.css'],\r\n  providers: [DatePipe]\r\n})\r\nexport class NewOrderComponent {\r\n  orderForm: any;\r\n  currentDate = new Date();\r\n  products: Array<{ id: number, name: string, category: string, size: number, quantity: number, price: number }> =\r\n    [\r\n      { id: 1, name: \"First\", category: \"Test\", size: 5, quantity: 2, price: 50 },\r\n      { id: 2, name: \"Second\", category: \"Test\", size: 15, quantity: 1, price: 100 },\r\n    ];\r\n  total: string;\r\n  currFormater = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n\r\n  constructor(private router: Router,\r\n      private oService: OrderService,\r\n      private pService: ProductService,\r\n      private toastr: ToastrService,\r\n      private formBuilder: FormBuilder) {\r\n    this.CreateForm();\r\n    this.total = this.currFormater.format(this.getTotal());\r\n  }\r\n  CreateForm() {\r\n    this.orderForm = this.formBuilder.group({\r\n      'orderNumber': [''],\r\n      'orderDate': [this.currentDate.toLocaleDateString()],\r\n      'customer': ['', [Validators.required]],\r\n      'status': ['', [Validators.required]],\r\n      'totalCost': [''],\r\n      'products': [this.products],\r\n      'comment': ['']\r\n    });\r\n  }\r\n\r\n  addProduct(): void {\r\n    this.products.push(\r\n      { id: 1, name: \"First\", category: \"Test\", size: 5, quantity: 2, price: 50 }\r\n    );\r\n    this.total = this.currFormater.format(this.getTotal());\r\n  }\r\n\r\n  saveOrder(): void {\r\n    if (this.orderForm.dirty && this.orderForm.valid) {\r\n      console.log(this.orderForm.value);\r\n    }\r\n  }\r\n\r\n  getTotal(): number {\r\n    let total = 0;\r\n    for (const element of this.products) {\r\n      total += element.quantity * element.price;\r\n    }\r\n    return total;\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}